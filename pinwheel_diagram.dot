digraph G {
    rankdir="LR"
    ranksep=1.5
    //nodesep=0.6
    //splines=polyline

    // Fetch, Decode, Execute, Memory, Write

    pc_l [shape="record" label="<top>pc|{<d>d|<q>q}|"]
    pc_r [shape="record" label="<top>pc|{<d>d|<q>q}|"]
    code [shape="record" label="<top>code|{<addr>addr|<data>data}|"]
    bus  [shape="record" label="<top>bus|{{<addr>addr|<wdata>wdata|<wmask>wmask|<wren>wren}|<rdata>rdata}|"]

    alu      [shape="Mrecord" label="alu|{{<op>op|<f3>f3|<f7>f7|<imm>imm|<pc>pc|<a>a|<b>b}|<out>out}|"]
    next_pc  [shape="Mrecord" label="<top>next_pc|{ {<op>op|<f3>f3|<imm>imm|<pc>pc|<a>a|<b>b} | <out>out }|"]
    bus_if   [shape="Mrecord" label="<top>bus_if|{{<op>op|<f3>f3|<imm>imm|<a>a|<b>b}|{<addr>addr|<wdata>wdata|<wmask>wmask|<wren>wren}}|"]

    writeback [shape="Mrecord" label="<top>writeback|{{<op>op|<rd>rd|<rdata>rdata|<alu>alu}|{<addr>addr|<wdata>wdata|<wren>wren}}|"]

    unpack [shape="Mrecord" label="<top>unpack|{{<f3>f3|<rdata>rdata}|{<out>out}}|"]

    decode_op [shape="Mrecord" label="<top>decode_op|{{<data>data}|{<op>op|<rd>rd|<f3>f3|<ra>ra|<rb>rb|<f7>f7}}|"]

    decode_imm [shape="Mrecord" label="<top>decode_imm|{{<data>data}|{<imm>imm}}|"]

    regfile_l [shape="record" label="<top>regfile|{{<raddr1>raddr1|<raddr2>raddr2|<waddr>waddr|<wdata>wdata|<wren>wren}|{<reg_a>reg_a|<reg_b>reg_b}}|"];
    regfile_r [shape="record" label="<top>regfile|{{<raddr1>raddr1|<raddr2>raddr2|<waddr>waddr|<wdata>wdata|<wren>wren}|{<reg_a>reg_a|<reg_b>reg_b}}|"];

    rank="same" {
        regfile_r
        pc_r
    }

    rank="same" {
        decode_op
        decode_imm
    }

    code:data -> decode_op:data
    code:data -> decode_imm:data


    pc_l:q -> code:addr
    pc_l:q -> next_pc:pc
    pc_l:q -> alu:pc

    next_pc:out -> pc_r:d

    decode_op:op -> writeback:op
    decode_op:op -> next_pc:op
    decode_op:op -> alu:op
    decode_op:op -> bus_if:op
    decode_op:rd -> writeback:rd
    decode_op:f3 -> bus_if:f3
    decode_op:f3 -> next_pc:f3
    decode_op:f3 -> alu:f3
    decode_op:f3 -> unpack:f3
    decode_op:ra -> regfile_l:raddr1
    decode_op:rb -> regfile_l:raddr2
    decode_op:f7 -> alu:f7

    decode_imm:imm    -> bus_if:imm
    decode_imm:imm    -> alu:imm
    decode_imm:imm    -> next_pc:imm

    writeback:addr  -> regfile_r:waddr
    writeback:wdata -> regfile_r:wdata
    writeback:wren  -> regfile_r:wren

    bus_if:addr  -> bus:addr
    bus_if:wdata -> bus:wdata
    bus_if:wmask -> bus:wmask
    bus_if:wren  -> bus:wren

    bus:rdata -> unpack:rdata

    unpack:out -> writeback:rdata

    regfile_l:reg_a -> alu:a
    regfile_l:reg_b -> alu:b

    regfile_l:reg_a -> bus_if:a
    regfile_l:reg_b -> bus_if:b
    regfile_l:reg_a -> next_pc:a
    regfile_l:reg_b -> next_pc:b

    alu:out -> writeback:alu


    /*
    rank="same" {
        pc_1
        code_1
        insn_1
        alu_out_1
        data_1
        //regfile_1
    }

    rank="same" {
        pc_2
        insn_2
        //alu_out_2
        //code_2
        //data_2
        regfile_2
    }

    rank="same" {
        pc_3
        insn_3
        alu_out_3
        code_3
        data_3
        //regfile_3
    }

    rank="same" {
        alu
        pc_gen
        addr_gen
    }

    //----------

    pc_1 [shape="record" label="<top>pc_1|{<d>d|<q>q}|"]
    pc_2 [shape="record" label="<top>pc_2|{<d>d|<q>q}|"]
    pc_3 [shape="record" label="<top>pc_3|{<d>d|<q>q}|"]

    insn_1 [shape="record" label="<top>insn_1|{<d>d|<q>q}|"]
    insn_2 [shape="record" label="<top>insn_2|{<d>d|<q>q}|"]
    insn_3 [shape="record" label="<top>insn_3|{<d>d|<q>q}|"]

    alu_out_1 [shape="record" label="<top>alu_out_1|{<d>d|<q>q}|"]
    //alu_out_2 [shape="record" label="<top>alu_out_2|{<d>d|<q>q}|"]
    alu_out_3 [shape="record" label="<top>alu_out_3|{<d>d|<q>q}|"]

    code_1 [shape="record" label="<top>code_1|{<raddr>raddr|<rdata>rdata}|"]
    //code_2 [shape="record" label="<top>code_2|{<raddr>raddr|<rdata>rdata}|"]
    code_3 [shape="record" label="<top>code_3|{<raddr>raddr|<rdata>rdata}|"]

    data_1 [shape="record" label="<top>data_1|{{<addr>addr|<wdata>wdata|<wren>wren}|<rdata>rdata}|"]
    //data_2 [shape="record" label="<top>data_2|{{<addr>addr|<wdata>wdata|<wren>wren}|<rdata>rdata}|"]
    data_3 [shape="record" label="<top>data_3|{{<addr>addr|<wdata>wdata|<wren>wren}|<rdata>rdata}|"]

    //regfile_1 [shape="record" label="<top>regfile_1|{{<raddr1>raddr1|<raddr2>raddr2|<waddr>waddr|<wdata>wdata|<wren>wren}|{<rdata1>rdata1|<rdata2>rdata2}}|"];
    regfile_2 [shape="record" label="<top>regfile_2|{{<raddr1>raddr1|<raddr2>raddr2|<waddr>waddr|<wdata>wdata|<wren>wren}|{<rdata1>rdata1|<rdata2>rdata2}}|"];
    //regfile_3 [shape="record" label="<top>regfile_3|{{<raddr1>raddr1|<raddr2>raddr2|<waddr>waddr|<wdata>wdata|<wren>wren}|{<rdata1>rdata1|<rdata2>rdata2}}|"];


    alu      [shape="Mrecord" label="alu|{{<insn>insn|<pc>pc|<a>a|<b>b}|<out>out}|"]
    pc_gen   [shape="Mrecord" label="<top>pc_gen|{ {<insn>insn|<pc>pc|<a>a|<b>b} | <out>out }|"]
    addr_gen [shape="Mrecord" label="<top>addr_gen|{{<insn>insn|<a>a|<b>b}|{<addr>addr|<wdata>wdata|<wren>wren}}|"]

    writeback [shape="Mrecord" label="<top>writeback|{{<insn>insn|<alu>alu|<data>data}|{<addr>addr|<wdata>wdata|<wren>wren}}|"]

    decode1 [shape="Mrecord" label="<top>decode|{{<insn>insn}|{<ra>ra|<rb>rb}}|"]

    decode2 [shape="Mrecord" label="<top>decode|{{<insn>insn}|{<alu_op>alu_op|<branch>branch|<mode>mode}}|"]

    //----------

    pc_1:q       -> pc_2:d [label="32"]
    insn_1:q     -> writeback:insn [label="32"]
    alu_out_1:q  -> writeback:alu  [label="32"]
    code_1:rdata -> decode1:insn
    code_1:rdata -> insn_2:d [label="32"]
    data_1:rdata -> writeback:data [label="32"]

    //----------

    decode1:ra -> regfile_2:raddr1 [label="5"]
    decode1:rb -> regfile_2:raddr2 [label="5"]

    writeback:addr   -> regfile_2:waddr [label="5"]
    writeback:wdata  -> regfile_2:wdata [label="32"]
    writeback:wren   -> regfile_2:wren  [label="1"]

    //----------

    pc_2:q           -> alu:pc   [label="32"]
    pc_2:q           -> pc_gen:pc   [label="32"]
    insn_2:q         -> decode2:insn [label="32"]
    insn_2:q         -> insn_3:d
    regfile_2:rdata1 -> alu:a    [label="32"]
    regfile_2:rdata2 -> alu:b    [label="32"]
    regfile_2:rdata1 -> pc_gen:a    [label="32"]
    regfile_2:rdata2 -> pc_gen:b    [label="32"]
    regfile_2:rdata1 -> addr_gen:a [label="32"]
    regfile_2:rdata2 -> addr_gen:b [label="32"]

    //----------

    decode2:alu_op   -> alu:insn [label="5"]
    decode2:branch   -> pc_gen:insn [label="5"]
    decode2:mode     -> addr_gen:insn  [label="5"]

    //----------

    alu:out        -> alu_out_3:d [label="32"]
    pc_gen:out     -> pc_3:d
    pc_gen:out     -> code_3:raddr [label="32"]
    addr_gen:addr  -> data_3:addr  [label="14"]
    addr_gen:wdata -> data_3:wdata [label="32"]
    addr_gen:wren  -> data_3:wren  [label="1"]
    */
}
